/*
 * Copyright (c) 2021. Shining-cat - Shiva Bernhard
 * This file is part of Everyday.
 *
 *     Everyday is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, version 3 of the License.
 *
 *     Everyday is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with Everyday.  If not, see <https://www.gnu.org/licenses/>.
 */
android {
    compileSdkVersion ApplicationSpecs.compileSdk
    defaultConfig {
        minSdkVersion ApplicationSpecs.minSdk
        targetSdkVersion ApplicationSpecs.targetSdk
        versionCode Releases.versionCode
        versionName Releases.versionName
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            testCoverageEnabled false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        viewBinding true
    }
    sourceSets {
        androidTest {

        }
        test {

        }
    }
    testOptions {
        animationsDisabled true
        unitTests {
            includeAndroidResources = true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    //workaround for compile error when running AndroidTests: https://github.com/Kotlin/kotlinx.coroutines/tree/master/kotlinx-coroutines-debug#debug-agent-and-android
    packagingOptions {
        // for JNA and JNA-platform
        exclude "META-INF/AL2.0"
        exclude "META-INF/LGPL2.1"
        // for byte-buddy
        exclude "META-INF/licenses/ASM"
        pickFirst "win32-x86-64/attach_hotspot_windows.dll"
        pickFirst "win32-x86/attach_hotspot_windows.dll"
    }
}

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply from: "$project.rootDir/conf_plugin_jacoco.gradle"
apply from: "$project.rootDir/conf_plugin_ben_manes_versions.gradle"
apply from: "$project.rootDir/conf_plugin_detekt.gradle"
apply from: "$project.rootDir/conf_plugin_dependencies_graph.gradle"
apply from: "$project.rootDir/conf_plugin_ktlint.gradle"

dependencies {
    implementation KotlinLibraries.kotlinJdk7
    implementation AndroidLibraries.coreRunTime

    // Koin
    implementation Libraries.koin

    // Lifecycle
    implementation AndroidLibraries.lifecycle_commons_java8
    implementation AndroidLibraries.lifecycle_livedata
    implementation AndroidLibraries.lifecycle_viewmodel_ktx

    // Unit Tests
    testImplementation TestLibraries.junit
    testImplementation AndroidTestLibraries.core_testing
    testImplementation TestLibraries.coroutines_test
    testImplementation TestLibraries.mockk
    testImplementation TestLibraries.robolectric
    testImplementation project(Modules.testutils)

    // Instrumented Tests
    androidTestImplementation AndroidTestLibraries.runner
    androidTestImplementation AndroidTestLibraries.junit
    androidTestImplementation AndroidTestLibraries.espresso
    androidTestImplementation AndroidTestLibraries.core_testing
    androidTestImplementation project(Modules.testutils)
}

