android {
    compileSdkVersion Versions.compileSdk
    defaultConfig {
        minSdkVersion Versions.minSdk
        targetSdkVersion Versions.targetSdk
        versionCode Releases.versionCode
        versionName Releases.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug{
            testCoverageEnabled true
        }
        release {
            minifyEnabled true
        }
    }

    sourceSets {
        androidTest {

        }
        test {

        }
    }
    testOptions {
        animationsDisabled true
        unitTests {
            includeAndroidResources = true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

dependencies {
    implementation KotlinLibraries.kotlinJdk7
    implementation AndroidLibraries.liveData
    implementation AndroidLibraries.coreRunTime //this is added to prevent a sub-dependency conflict between google-services and the rest

    androidTestImplementation TestLibraries.junit
    androidTestImplementation TestLibraries.androidTestRunner
    testImplementation TestLibraries.junit
}

jacoco {
    toolVersion = Versions.jacoco
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

//task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = 'Everyday'
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$[0-9].*'
    ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
    ])
}

// This task launches the tests and copies the reports to /reports/ directory
task everydayReport(type: Copy, dependsOn: 'jacocoTestReport') {
    group = 'Everyday'
    from "$buildDir/reports/"
    into "../reports/$project.name"
}